name: deploiement

run-name: ðŸš€ ${{ github.actor }} is deploying from ${{ github.ref_name }}

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Lint code with ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - run: npm ci
      - name: Run ESLint
        run: npm run lint

  unit_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - run: npm ci
      - run: npm run test --if-present

  # e2e_tests:
  #   name: Run E2E Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*
  #     - run: npm ci
  #     - run: npx playwright install --with-deps
  #     - name: Run Smoke Tests
  #       run: npx playwright test --project=chromium --grep @smoke
  #     - name: Run Full Tests
  #       run: npx playwright test --project=chromium --grep-invert @smoke

  build:
    name: Build Application
    runs-on: ubuntu-latest
    # needs: [lint, unit_tests, e2e_tests]
    needs: [lint, unit_tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - run: npm ci
      - name: Define env vars
        run: |
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> $GITHUB_ENV
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "VITE_BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
      - run: npm run build
      - name: Protect .env files
        run: |
          cat > dist/.htaccess << EOF
          <Files .env>
            Order allow,deny
            Deny from all
          </Files>
          EOF
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: front-end-build
          path: ./dist

  migrate:
    name: Run DB Migration (if any)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Example migration step
        run: echo "Run migration script here"

  deploy:
    name: Deploy to AlwaysData
    runs-on: ubuntu-latest
    needs: [build, migrate]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: front-end-build
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.SSH_KEY }}" > ~/deploy_key
          chmod 400 ~/deploy_key
      - name: Define target path
        id: path
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "path=www" >> $GITHUB_OUTPUT
          else
            echo "path=www/${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Deploy to Alwaysdata via rsync
        run: |
          ssh -i ~/deploy_key -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.SERVER }} "mkdir -p ~/${{ steps.path.outputs.path }}"
          rsync -Pavz --exclude-from='rsync-exclude.txt' -e "ssh -i ~/deploy_key -o StrictHostKeyChecking=no" ${{ github.workspace }}/ ${{ secrets.USER }}@${{ secrets.SERVER }}:~/${{ steps.path.outputs.path }}
